// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.3
// source: afs_proto.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSystemService_AcquireWriteAccess_FullMethodName = "/dfs.FileSystemService/AcquireWriteAccess"
	FileSystemService_Store_FullMethodName              = "/dfs.FileSystemService/Store"
	FileSystemService_Fetch_FullMethodName              = "/dfs.FileSystemService/Fetch"
	FileSystemService_Delete_FullMethodName             = "/dfs.FileSystemService/Delete"
	FileSystemService_GetFileStat_FullMethodName        = "/dfs.FileSystemService/GetFileStat"
	FileSystemService_RequestFilesAsync_FullMethodName  = "/dfs.FileSystemService/RequestFilesAsync"
)

// FileSystemServiceClient is the client API for FileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemServiceClient interface {
	// Acquire store / delete lock
	AcquireWriteAccess(ctx context.Context, in *WriteAccessRequest, opts ...grpc.CallOption) (*WriteAccessResponse, error)
	// Store file on remote server
	Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileData, StoreResponse], error)
	// Fetch file from remote server
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileData], error)
	// Delete deletes file from remote server
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Get the stat info for a file
	GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*File, error)
	// Client requests changes
	RequestFilesAsync(ctx context.Context, in *RequestFilesAsyncRequest, opts ...grpc.CallOption) (*RequestFilesAsyncResponse, error)
}

type fileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemServiceClient(cc grpc.ClientConnInterface) FileSystemServiceClient {
	return &fileSystemServiceClient{cc}
}

func (c *fileSystemServiceClient) AcquireWriteAccess(ctx context.Context, in *WriteAccessRequest, opts ...grpc.CallOption) (*WriteAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteAccessResponse)
	err := c.cc.Invoke(ctx, FileSystemService_AcquireWriteAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileData, StoreResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystemService_ServiceDesc.Streams[0], FileSystemService_Store_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileData, StoreResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_StoreClient = grpc.ClientStreamingClient[FileData, StoreResponse]

func (c *fileSystemServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystemService_ServiceDesc.Streams[1], FileSystemService_Fetch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchRequest, FileData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_FetchClient = grpc.ServerStreamingClient[FileData]

func (c *fileSystemServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, FileSystemService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, FileSystemService_GetFileStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) RequestFilesAsync(ctx context.Context, in *RequestFilesAsyncRequest, opts ...grpc.CallOption) (*RequestFilesAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestFilesAsyncResponse)
	err := c.cc.Invoke(ctx, FileSystemService_RequestFilesAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServiceServer is the server API for FileSystemService service.
// All implementations must embed UnimplementedFileSystemServiceServer
// for forward compatibility.
type FileSystemServiceServer interface {
	// Acquire store / delete lock
	AcquireWriteAccess(context.Context, *WriteAccessRequest) (*WriteAccessResponse, error)
	// Store file on remote server
	Store(grpc.ClientStreamingServer[FileData, StoreResponse]) error
	// Fetch file from remote server
	Fetch(*FetchRequest, grpc.ServerStreamingServer[FileData]) error
	// Delete deletes file from remote server
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Get the stat info for a file
	GetFileStat(context.Context, *GetFileStatRequest) (*File, error)
	// Client requests changes
	RequestFilesAsync(context.Context, *RequestFilesAsyncRequest) (*RequestFilesAsyncResponse, error)
	mustEmbedUnimplementedFileSystemServiceServer()
}

// UnimplementedFileSystemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSystemServiceServer struct{}

func (UnimplementedFileSystemServiceServer) AcquireWriteAccess(context.Context, *WriteAccessRequest) (*WriteAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireWriteAccess not implemented")
}
func (UnimplementedFileSystemServiceServer) Store(grpc.ClientStreamingServer[FileData, StoreResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedFileSystemServiceServer) Fetch(*FetchRequest, grpc.ServerStreamingServer[FileData]) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedFileSystemServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileSystemServiceServer) GetFileStat(context.Context, *GetFileStatRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStat not implemented")
}
func (UnimplementedFileSystemServiceServer) RequestFilesAsync(context.Context, *RequestFilesAsyncRequest) (*RequestFilesAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFilesAsync not implemented")
}
func (UnimplementedFileSystemServiceServer) mustEmbedUnimplementedFileSystemServiceServer() {}
func (UnimplementedFileSystemServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServiceServer will
// result in compilation errors.
type UnsafeFileSystemServiceServer interface {
	mustEmbedUnimplementedFileSystemServiceServer()
}

func RegisterFileSystemServiceServer(s grpc.ServiceRegistrar, srv FileSystemServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSystemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSystemService_ServiceDesc, srv)
}

func _FileSystemService_AcquireWriteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).AcquireWriteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_AcquireWriteAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).AcquireWriteAccess(ctx, req.(*WriteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServiceServer).Store(&grpc.GenericServerStream[FileData, StoreResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_StoreServer = grpc.ClientStreamingServer[FileData, StoreResponse]

func _FileSystemService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSystemServiceServer).Fetch(m, &grpc.GenericServerStream[FetchRequest, FileData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_FetchServer = grpc.ServerStreamingServer[FileData]

func _FileSystemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_GetFileStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).GetFileStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_GetFileStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).GetFileStat(ctx, req.(*GetFileStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_RequestFilesAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFilesAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).RequestFilesAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_RequestFilesAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).RequestFilesAsync(ctx, req.(*RequestFilesAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystemService_ServiceDesc is the grpc.ServiceDesc for FileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.FileSystemService",
	HandlerType: (*FileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireWriteAccess",
			Handler:    _FileSystemService_AcquireWriteAccess_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileSystemService_Delete_Handler,
		},
		{
			MethodName: "GetFileStat",
			Handler:    _FileSystemService_GetFileStat_Handler,
		},
		{
			MethodName: "RequestFilesAsync",
			Handler:    _FileSystemService_RequestFilesAsync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _FileSystemService_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Fetch",
			Handler:       _FileSystemService_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "afs_proto.proto",
}
